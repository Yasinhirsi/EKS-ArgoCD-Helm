name: Deploy Infrastructure

on:
  workflow_dispatch:

permissions:
  id-token: write 
  contents: read  

env:
  AWS_REGION: eu-west-2
  CLUSTER_NAME: eks-proj

jobs:
  terraform-fmt:
    name: Terraform Format
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.2"
      - name: Terraform Format Check
        run: terraform fmt -check -recursive

  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.2"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          role-session-name: github-actions-validate
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

  tflint:
    name: TFLint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4

      - name: Init TFLint
        run: tflint --init

      - name: Run TFLint
        run: tflint

  checkov:
    name: Checkov Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Checkov scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/
          framework: terraform
          soft_fail: true

  # Deploy Stage: Terraform Apply only if quality gates pass
  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [terraform-fmt, terraform-validate, tflint, checkov]
    defaults:
      run:
        working-directory: ./terraform
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.2"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          role-session-name: github-actions-apply
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Wait for EKS Cluster
        run: |
          aws eks wait cluster-active --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

  # Deploy Stage: 
  argocd-deploy:
    name: ArgoCD Deployment
    runs-on: ubuntu-latest
    needs: terraform-apply
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          role-session-name: github-actions-argocd
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Wait for nodes
        run: |
          kubectl wait --for=condition=Ready nodes --all --timeout=300s

      - name: Apply ClusterIssuer
        run: kubectl apply -f cert-manager/cluster-issuer.yaml

      - name: Deploy ArgoCD Application
        run: |
          kubectl apply -f argo-cd/application.yaml

      - name: Wait for ArgoCD Server
        run: |
          kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd

      - name: Get ArgoCD Password
        run: |
          echo "ArgoCD admin password:"
          kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
          echo ""

      - name: Get Grafana Password
        run: |
          echo "Grafana admin password:"
          kubectl get secret -n monitoring monitoring-stack-grafana -o jsonpath="{.data.admin-password}" | base64 -d
          echo ""
